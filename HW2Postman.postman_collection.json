{
	"info": {
		"_postman_id": "cb783ffc-099c-4af0-8b80-a2d17f1679ce",
		"name": "HW2Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20773216"
	},
	"item": [
		{
			"name": "E_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Correct text\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "E_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"tests[\"Correct name\"] = jsonData.name == \"Ivan\";\r",
							"tests[\"Correct age\"] = jsonData.age == \"28\";\r",
							"tests[\"Correct salary\"] = jsonData.salary == 3000;\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(\"family -\", jsonData.family);\r",
							"\r",
							"//Спарсить request\r",
							"let req = request.data;\r",
							"\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"// //Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.age)).to.include(req_age);\r",
							"});\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.salary)).to.include(req_salary);\r",
							"});\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary = jsonData.salary\r",
							"let salary_1_5 = salary * 4; \r",
							"let resp_salary_1_5 = jsonData.family.u_salary_1_5_year;\r",
							"pm.test(\"Salary for 4 month 12000\", function () {\r",
							"    pm.expect(salary_1_5).to.eql(resp_salary_1_5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "3000",
							"disabled": true
						}
					]
				}
			},
			"response": [
				{
					"name": "EP_2",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}",
									"disabled": true
								},
								{
									"key": "age",
									"value": "{{age}}",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "3000",
									"disabled": true
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "223"
						},
						{
							"key": "Server",
							"value": "Werkzeug/2.0.1 Python/3.8.10"
						},
						{
							"key": "Date",
							"value": "Mon, 13 Jun 2022 20:09:40 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"age\": \"28\",\n    \"family\": {\n        \"children\": [\n            [\n                \"Alex\",\n                24\n            ],\n            [\n                \"Kate\",\n                12\n            ]\n        ],\n        \"u_salary_1_5_year\": 12000\n    },\n    \"name\": \"Ivan\",\n    \"salary\": 3000\n}"
				}
			]
		},
		{
			"name": "E_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.\r",
							"tests[\"Correct name\"] = jsonData.name == \"Ivan\";\r",
							"tests[\"Correct age\"] = jsonData.age == \"28\";\r",
							"tests[\"Correct salary\"] = jsonData.salary == 3000;\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(\"family -\", jsonData.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Dog have name\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.family.pets.dog)).to.include(\"name\");\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have age\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.family.pets.dog)).to.include(\"age\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog 4 age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": [
				{
					"name": "EP_2",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}",
									"disabled": true
								},
								{
									"key": "age",
									"value": "{{age}}",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "3000",
									"disabled": true
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "223"
						},
						{
							"key": "Server",
							"value": "Werkzeug/2.0.1 Python/3.8.10"
						},
						{
							"key": "Date",
							"value": "Mon, 13 Jun 2022 20:09:40 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"age\": \"28\",\n    \"family\": {\n        \"children\": [\n            [\n                \"Alex\",\n                24\n            ],\n            [\n                \"Kate\",\n                12\n            ]\n        ],\n        \"u_salary_1_5_year\": 12000\n    },\n    \"name\": \"Ivan\",\n    \"salary\": 3000\n}"
				}
			]
		},
		{
			"name": "E_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.age)).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(\"Req salary\", req_salary)\r",
							"console.log(\"Resp salary\", jsonData.salary)\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Resp salary 1\", jsonData.salary[0])\r",
							"console.log(\"Resp salary 2\", jsonData.salary[1])\r",
							"console.log(\"Resp salary 3\", jsonData.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"tests[\"Correct 3000\"] = jsonData.salary[0] == req_salary;\r",
							"tests[\"Correct 6000\"] = jsonData.salary[1] == req_salary*2;\r",
							"tests[\"Correct 9000\"] = jsonData.salary[2] == req_salary*3;\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную name\r",
							"// Передать в окружение переменную age\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"name\",req.name);\r",
							"pm.environment.set(\"age\",req.age);\r",
							"pm.environment.set(\"salary\",req.salary);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"jsonData.salary.forEach((i) => {console.log(i)});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "E_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let start_salary = jsonData.start_qa_salary;\r",
							"let s6_salary = jsonData.qa_salary_after_6_months;\r",
							"let s12_salary = jsonData.qa_salary_after_12_months;\r",
							"let s18_salary = jsonData[\"qa_salary_after_1.5_year\"];\r",
							"let s42_salary = jsonData[\"qa_salary_after_3.5_years\"];\r",
							"\r",
							"//Спарсить request.\r",
							"let req =request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"// Вставить параметр salary из окружения в request\r",
							"// Вставить параметр age из окружения в age\r",
							"// Вставить параметр name из окружения в name\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Have Start Salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Have 6 Salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Have 12 Salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Have 18 Salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Have 42 Salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Have person\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = salary\", function () {\r",
							"    pm.expect(String(jsonData.start_qa_salary)).to.eql(String(start_salary));\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2\", function () {\r",
							"    pm.expect(String(s6_salary)).to.eql(String(start_salary*2));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7\", function () {\r",
							"    pm.expect(String(s12_salary)).to.eql(String(start_salary*2.7));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"    pm.expect(String(s18_salary)).to.eql(String(start_salary*3.3));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"    pm.expect(String(s42_salary)).to.eql(String(start_salary*3.8));\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"    pm.expect(String(jsonData.person.u_name[1])).to.eql(String(start_salary));\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"    pm.expect(String(jsonData.person.u_age)).to.eql(String(req_age));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary*4.2\", function () {\r",
							"    pm.expect(String(jsonData.person.u_salary_5_years)).to.eql(String(start_salary*4.2));\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in jsonData.person)\r",
							"console.log(jsonData.person[i])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2?name={{name}}&age={{age}}&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": [
				{
					"name": "EP_2",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}",
									"disabled": true
								},
								{
									"key": "age",
									"value": "{{age}}",
									"disabled": true
								},
								{
									"key": "salary",
									"value": "3000",
									"disabled": true
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "223"
						},
						{
							"key": "Server",
							"value": "Werkzeug/2.0.1 Python/3.8.10"
						},
						{
							"key": "Date",
							"value": "Mon, 13 Jun 2022 20:09:40 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"age\": \"28\",\n    \"family\": {\n        \"children\": [\n            [\n                \"Alex\",\n                24\n            ],\n            [\n                \"Kate\",\n                12\n            ]\n        ],\n        \"u_salary_1_5_year\": 12000\n    },\n    \"name\": \"Ivan\",\n    \"salary\": 3000\n}"
				}
			]
		}
	]
}